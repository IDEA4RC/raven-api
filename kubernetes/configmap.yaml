apiVersion: v1
kind: ConfigMap
metadata:
  name: raven-api-config
data:
  # Initialization script to create tables if they don't exist
  init-db.sql: |
    -- Este script se ejecuta automáticamente al inicializar PostgreSQL
    -- Solo crea las tablas si no existen (idempotente)

    CREATE TABLE IF NOT EXISTS organizations (
        id SERIAL PRIMARY KEY,
        organization_name VARCHAR,
        organization_contact_name VARCHAR,
        address TEXT
    );

    CREATE TABLE IF NOT EXISTS user_types (
        id SERIAL PRIMARY KEY,
        type_name VARCHAR NOT NULL
    );

    CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        keycloak_id VARCHAR,
        username VARCHAR UNIQUE NOT NULL,
        email VARCHAR,
        first_name VARCHAR,
        last_name VARCHAR,
        is_active BOOLEAN DEFAULT true,
        organization_id INTEGER REFERENCES organizations(id),
        user_type_id INTEGER REFERENCES user_types(id)
    );

    CREATE TABLE IF NOT EXISTS teams (
        id SERIAL PRIMARY KEY,
        team_name VARCHAR NOT NULL,
        team_contact_name VARCHAR,
        address TEXT
    );

    CREATE TABLE IF NOT EXISTS user_teams (
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        team_id INTEGER REFERENCES teams(id) ON DELETE CASCADE,
        PRIMARY KEY (user_id, team_id)
    );

    CREATE TABLE IF NOT EXISTS workspaces (
        id SERIAL PRIMARY KEY,
        name VARCHAR NOT NULL,
        description TEXT,
        version VARCHAR,
        creation_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        creator_id INTEGER REFERENCES users(id),
        team_ids TEXT[], -- Array de strings para múltiples equipos
        last_edit TIMESTAMP WITH TIME ZONE,
        metadata_search INTEGER,
        data_access INTEGER,
        data_query VARCHAR,
        result_report INTEGER,
        vr_study_id VARCHAR
    );

    -- Insertar datos básicos si no existen
    INSERT INTO user_types (id, type_name) VALUES (1, 'admin') ON CONFLICT DO NOTHING;
    INSERT INTO users (id, keycloak_id, username, email, first_name, last_name, is_active, user_type_id) 
    VALUES (1, 'admin-user-id', 'admin', 'admin@raven.com', 'Admin', 'User', true, 1) ON CONFLICT DO NOTHING;
---
apiVersion: batch/v1
kind: Job
metadata:
  name: raven-api-db-init
spec:
  template:
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-postgres
        image: postgres:15
        command: [ 'sh', '-c', 'until pg_isready -h postgres-service -p 5432 -U raven_user; do echo waiting for database; sleep 2; done;' ]
        env:
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: raven-api-secrets
              key: postgres-user
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: raven-api-secrets
              key: postgres-password
      containers:
      - name: db-init
        image: postgres:15
        command: [ 'psql' ]
        args: [ '-h', 'postgres-service', '-U', 'raven_user', '-d', 'raven_db', '-f', '/scripts/init-db.sql' ]
        env:
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: raven-api-secrets
              key: postgres-user
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: raven-api-secrets
              key: postgres-password
        volumeMounts:
        - name: init-scripts
          mountPath: /scripts
      volumes:
      - name: init-scripts
        configMap:
          name: raven-api-config
